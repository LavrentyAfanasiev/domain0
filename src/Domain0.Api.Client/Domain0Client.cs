//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Domain0.Api.Client
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IDomain0Client
    {
        /// <summary>Method for receive Applications by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationsByFilterAsync(ApplicationFilter applicationFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Applications by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationsByFilterAsync(ApplicationFilter applicationFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get Application</summary>
        /// <param name="id">Application id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Application</summary>
        /// <param name="id">Application id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete Application by id</summary>
        /// <param name="id">Delete Application</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveApplicationAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Application by id</summary>
        /// <param name="id">Delete Application</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveApplicationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for update Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateApplicationAsync(Application application);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateApplicationAsync(Application application, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for create Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateApplicationAsync(Application application);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateApplicationAsync(Application application, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Environments by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentsByFilterAsync(EnvironmentFilter environmentFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Environments by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentsByFilterAsync(EnvironmentFilter environmentFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get Environment</summary>
        /// <param name="id">Environment id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Environment</summary>
        /// <param name="id">Environment id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete Environment by id</summary>
        /// <param name="id">Delete Environment</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveEnvironmentAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Environment by id</summary>
        /// <param name="id">Delete Environment</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveEnvironmentAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for update Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEnvironmentAsync(Environment environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEnvironmentAsync(Environment environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for create Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateEnvironmentAsync(Environment environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateEnvironmentAsync(Environment environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive MessageTemplates by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplatesByFilterAsync(MessageTemplateFilter messageTemplateFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive MessageTemplates by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplatesByFilterAsync(MessageTemplateFilter messageTemplateFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get MessageTemplate</summary>
        /// <param name="id">message template id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplateAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get MessageTemplate</summary>
        /// <param name="id">message template id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplateAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete MessageTemplate by id</summary>
        /// <param name="id">Delete message template</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveMessageTemplateAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete MessageTemplate by id</summary>
        /// <param name="id">Delete message template</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveMessageTemplateAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for update MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateMessageTemplateAsync(MessageTemplate messageTemplate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateMessageTemplateAsync(MessageTemplate messageTemplate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for create MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateMessageTemplateAsync(MessageTemplate messageTemplate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateMessageTemplateAsync(MessageTemplate messageTemplate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserPermission>> LoadPermissionsByUserFilterAsync(UserPermissionFilter permissionFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserPermission>> LoadPermissionsByUserFilterAsync(UserPermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<RolePermission>> LoadPermissionsByRoleFilterAsync(RolePermissionFilter permissionFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<RolePermission>> LoadPermissionsByRoleFilterAsync(RolePermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadPermissionsByFilterAsync(PermissionFilter permissionFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadPermissionsByFilterAsync(PermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get Permission</summary>
        /// <param name="id">Permission id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> LoadPermissionAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Permission</summary>
        /// <param name="id">Permission id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> LoadPermissionAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete Permission by id</summary>
        /// <param name="id">Delete Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemovePermissionAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Permission by id</summary>
        /// <param name="id">Delete Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemovePermissionAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for update Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePermissionAsync(Permission permission);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePermissionAsync(Permission permission, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for create Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreatePermissionAsync(Permission permission);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreatePermissionAsync(Permission permission, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Roles by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Role>> LoadRolesByFilterAsync(RoleFilter roleFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Roles by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Role>> LoadRolesByFilterAsync(RoleFilter roleFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Roles by user filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserRole>> LoadRolesByUserFilterAsync(RoleUserFilter roleUserFilter);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Roles by user filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserRole>> LoadRolesByUserFilterAsync(RoleUserFilter roleUserFilter, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get Role</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> LoadRoleAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Role</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> LoadRoleAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete Role by id</summary>
        /// <param name="id">Delete Role</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRoleAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Role by id</summary>
        /// <param name="id">Delete Role</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRoleAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for update Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRoleAsync(Role role);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRoleAsync(Role role, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for create Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateRoleAsync(Role role);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CreateRoleAsync(Role role, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for add role permissions</summary>
        /// <param name="id">role id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddRolePermissionsAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add role permissions</summary>
        /// <param name="id">role id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddRolePermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive Role Permissions</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadRolePermissionsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Role Permissions</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadRolePermissionsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for remove role permissions</summary>
        /// <param name="id">role id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRolePermissionsAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove role permissions</summary>
        /// <param name="id">role id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRolePermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for add user permissions</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddUserPermissionsAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add user permissions</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddUserPermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserPermissionsAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserPermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for add user roles</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddUserRolesAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add user roles</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddUserRolesAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRolesAsync(int id, IdArrayRequest ids);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserRolesAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by email</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterByEmailAsync(RegisterRequest email, string accept_Language);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by email</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterByEmailAsync(RegisterRequest email, string accept_Language, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by email with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterByEmailWithEnvironmentAsync(RegisterRequest email, string environmentToken, string accept_Language);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by email with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterByEmailWithEnvironmentAsync(RegisterRequest email, string environmentToken, string accept_Language, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for login by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByEmailAsync(EmailLoginRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByEmailAsync(EmailLoginRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for check user exists</summary>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DoesUserExistByEmailAsync(RegisterRequest email);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for check user exists</summary>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DoesUserExistByEmailAsync(RegisterRequest email, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestResetPasswordByEmailAsync(RegisterRequest email);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestResetPasswordByEmailAsync(RegisterRequest email, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for force change email only administrator</summary>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceChangeEmailAsync(ChangeEmailRequest change_email_request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force change email only administrator</summary>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceChangeEmailAsync(ChangeEmailRequest change_email_request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for force registration by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateEmailUserRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force registration by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateEmailUserRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for reset email</summary>
        /// <returns>operation completes successfully, validation code sent to email</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestChangeEmailAsync(ChangeEmailUserRequest change_email_request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset email</summary>
        /// <returns>operation completes successfully, validation code sent to email</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestChangeEmailAsync(ChangeEmailUserRequest change_email_request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for commit change email request</summary>
        /// <param name="code">user's pin code for change email</param>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitChangeEmailAsync(long code);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for commit change email request</summary>
        /// <param name="code">user's pin code for change email</param>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitChangeEmailAsync(long code, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for login by domain user</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserWithEnvironmentAsync(ActiveDirectoryUserLoginRequest request, string environmentToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by domain user</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserWithEnvironmentAsync(ActiveDirectoryUserLoginRequest request, string environmentToken, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for login by domain user</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserAsync(ActiveDirectoryUserLoginRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by domain user</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserAsync(ActiveDirectoryUserLoginRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by phone</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAsync(long phone, string accept_Language);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAsync(long phone, string accept_Language, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by phone with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterWithEnvironmentAsync(long phone, string environmentToken, string accept_Language);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterWithEnvironmentAsync(long phone, string environmentToken, string accept_Language, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(SmsLoginRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(SmsLoginRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for check user exists</summary>
        /// <param name="phone">user's phone with single number, started from 7 for Russia, 71231234567 for example</param>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DoesUserExistAsync(long phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for check user exists</summary>
        /// <param name="phone">user's phone with single number, started from 7 for Russia, 71231234567 for example</param>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DoesUserExistAsync(long phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for get phone by user id</summary>
        /// <param name="id">User Id</param>
        /// <returns>User phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> PhoneByUserIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get phone by user id</summary>
        /// <param name="id">User Id</param>
        /// <returns>User phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> PhoneByUserIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for refresh access token</summary>
        /// <param name="refreshToken">Refresh token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(string refreshToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for refresh access token</summary>
        /// <param name="refreshToken">Refresh token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(string refreshToken, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestResetPasswordAsync(long phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestResetPasswordAsync(long phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateUserRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateUserRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for force change phone only administrator</summary>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceChangePhoneAsync(ChangePhoneRequest phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force change phone only administrator</summary>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceChangePhoneAsync(ChangePhoneRequest phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceResetPasswordAsync(long phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceResetPasswordAsync(long phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for change phone</summary>
        /// <returns>operation completes successfully, validation code sent to phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestChangePhoneAsync(ChangePhoneUserRequest change_phone_request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change phone</summary>
        /// <returns>operation completes successfully, validation code sent to phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestChangePhoneAsync(ChangePhoneUserRequest change_phone_request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for commit change phone request</summary>
        /// <param name="code">user's pin code for change phone</param>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitChangePhoneAsync(long code);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for commit change phone request</summary>
        /// <param name="code">user's pin code for change phone</param>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CommitChangePhoneAsync(long code, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive own profile</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetMyProfileAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive own profile</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetMyProfileAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for change password</summary>
        /// <returns>operation completes successfully</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeMyPasswordAsync(ChangePasswordRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change password</summary>
        /// <returns>operation completes successfully</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeMyPasswordAsync(ChangePasswordRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive profiles by user ids</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetUserByFilterAsync(UserProfileFilter request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profiles by user ids</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetUserByFilterAsync(UserProfileFilter request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive all profiles</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetAllUsersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive all profiles</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetAllUsersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive profile by phone</summary>
        /// <param name="phone">User phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetUserByPhoneAsync(long phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profile by phone</summary>
        /// <param name="phone">User phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetUserByPhoneAsync(long phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive profile by user id</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetUserByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profile by user id</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> GetUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for change user data</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> UpdateUserAsync(int id, UserProfile request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change user data</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfile> UpdateUserAsync(int id, UserProfile request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for lock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LockUserAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for lock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LockUserAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for unlock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnlockUserAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for unlock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnlockUserAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceResetUserPasswordAsync(ForceResetPasswordRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForceResetUserPasswordAsync(ForceResetPasswordRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for delete user</summary>
        /// <param name="phone">phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserByPhoneAsync(long phone);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete user</summary>
        /// <param name="phone">phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserByPhoneAsync(long phone, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for receive environments</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> GetEnvironmentsAvailableForCreateUsersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive environments</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> GetEnvironmentsAvailableForCreateUsersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Method for refresh access token</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> RefreshTokenAsync(RefreshTokenRequest refreshToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for refresh access token</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> RefreshTokenAsync(RefreshTokenRequest refreshToken, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Domain0Client : IDomain0Client
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Domain0Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
    
        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Method for receive Applications by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationsByFilterAsync(ApplicationFilter applicationFilter)
        {
            return LoadApplicationsByFilterAsync(applicationFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Applications by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationsByFilterAsync(ApplicationFilter applicationFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationFilter == null)
                throw new System.ArgumentNullException("applicationFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Application/ByFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(applicationFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Application>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Application>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get Application</summary>
        /// <param name="id">Application id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationAsync(int id)
        {
            return LoadApplicationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Application</summary>
        /// <param name="id">Application id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Application>> LoadApplicationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Application/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Application>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Application>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete Application by id</summary>
        /// <param name="id">Delete Application</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveApplicationAsync(int id)
        {
            return RemoveApplicationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Application by id</summary>
        /// <param name="id">Delete Application</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveApplicationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Application/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for update Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateApplicationAsync(Application application)
        {
            return UpdateApplicationAsync(application, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateApplicationAsync(Application application, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Application");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(application, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for create Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> CreateApplicationAsync(Application application)
        {
            return CreateApplicationAsync(application, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Application</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> CreateApplicationAsync(Application application, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Application");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(application, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Environments by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentsByFilterAsync(EnvironmentFilter environmentFilter)
        {
            return LoadEnvironmentsByFilterAsync(environmentFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Environments by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentsByFilterAsync(EnvironmentFilter environmentFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (environmentFilter == null)
                throw new System.ArgumentNullException("environmentFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Environment/ByFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(environmentFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Environment>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Environment>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get Environment</summary>
        /// <param name="id">Environment id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentAsync(int id)
        {
            return LoadEnvironmentAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Environment</summary>
        /// <param name="id">Environment id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> LoadEnvironmentAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Environment/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Environment>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Environment>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete Environment by id</summary>
        /// <param name="id">Delete Environment</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveEnvironmentAsync(int id)
        {
            return RemoveEnvironmentAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Environment by id</summary>
        /// <param name="id">Delete Environment</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveEnvironmentAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Environment/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for update Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateEnvironmentAsync(Environment environment)
        {
            return UpdateEnvironmentAsync(environment, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateEnvironmentAsync(Environment environment, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Environment");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(environment, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for create Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> CreateEnvironmentAsync(Environment environment)
        {
            return CreateEnvironmentAsync(environment, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Environment</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> CreateEnvironmentAsync(Environment environment, System.Threading.CancellationToken cancellationToken)
        {
            if (environment == null)
                throw new System.ArgumentNullException("environment");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Environment");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(environment, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive MessageTemplates by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplatesByFilterAsync(MessageTemplateFilter messageTemplateFilter)
        {
            return LoadMessageTemplatesByFilterAsync(messageTemplateFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive MessageTemplates by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplatesByFilterAsync(MessageTemplateFilter messageTemplateFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (messageTemplateFilter == null)
                throw new System.ArgumentNullException("messageTemplateFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/MessageTemplate/ByFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(messageTemplateFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<MessageTemplate>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<MessageTemplate>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get MessageTemplate</summary>
        /// <param name="id">message template id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplateAsync(int id)
        {
            return LoadMessageTemplateAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get MessageTemplate</summary>
        /// <param name="id">message template id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MessageTemplate>> LoadMessageTemplateAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/MessageTemplate/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<MessageTemplate>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<MessageTemplate>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete MessageTemplate by id</summary>
        /// <param name="id">Delete message template</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveMessageTemplateAsync(int id)
        {
            return RemoveMessageTemplateAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete MessageTemplate by id</summary>
        /// <param name="id">Delete message template</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveMessageTemplateAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/MessageTemplate/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for update MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateMessageTemplateAsync(MessageTemplate messageTemplate)
        {
            return UpdateMessageTemplateAsync(messageTemplate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateMessageTemplateAsync(MessageTemplate messageTemplate, System.Threading.CancellationToken cancellationToken)
        {
            if (messageTemplate == null)
                throw new System.ArgumentNullException("messageTemplate");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/MessageTemplate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(messageTemplate, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for create MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> CreateMessageTemplateAsync(MessageTemplate messageTemplate)
        {
            return CreateMessageTemplateAsync(messageTemplate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create MessageTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> CreateMessageTemplateAsync(MessageTemplate messageTemplate, System.Threading.CancellationToken cancellationToken)
        {
            if (messageTemplate == null)
                throw new System.ArgumentNullException("messageTemplate");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/MessageTemplate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(messageTemplate, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserPermission>> LoadPermissionsByUserFilterAsync(UserPermissionFilter permissionFilter)
        {
            return LoadPermissionsByUserFilterAsync(permissionFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserPermission>> LoadPermissionsByUserFilterAsync(UserPermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (permissionFilter == null)
                throw new System.ArgumentNullException("permissionFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission/ByUserFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(permissionFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<UserPermission>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<UserPermission>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RolePermission>> LoadPermissionsByRoleFilterAsync(RolePermissionFilter permissionFilter)
        {
            return LoadPermissionsByRoleFilterAsync(permissionFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<RolePermission>> LoadPermissionsByRoleFilterAsync(RolePermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (permissionFilter == null)
                throw new System.ArgumentNullException("permissionFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission/ByRoleFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(permissionFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<RolePermission>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<RolePermission>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadPermissionsByFilterAsync(PermissionFilter permissionFilter)
        {
            return LoadPermissionsByFilterAsync(permissionFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Permissions by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadPermissionsByFilterAsync(PermissionFilter permissionFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (permissionFilter == null)
                throw new System.ArgumentNullException("permissionFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission/ByFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(permissionFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Permission>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Permission>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get Permission</summary>
        /// <param name="id">Permission id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> LoadPermissionAsync(int id)
        {
            return LoadPermissionAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Permission</summary>
        /// <param name="id">Permission id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> LoadPermissionAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete Permission by id</summary>
        /// <param name="id">Delete Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemovePermissionAsync(int id)
        {
            return RemovePermissionAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Permission by id</summary>
        /// <param name="id">Delete Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemovePermissionAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for update Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdatePermissionAsync(Permission permission)
        {
            return UpdatePermissionAsync(permission, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdatePermissionAsync(Permission permission, System.Threading.CancellationToken cancellationToken)
        {
            if (permission == null)
                throw new System.ArgumentNullException("permission");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(permission, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for create Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> CreatePermissionAsync(Permission permission)
        {
            return CreatePermissionAsync(permission, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Permission</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> CreatePermissionAsync(Permission permission, System.Threading.CancellationToken cancellationToken)
        {
            if (permission == null)
                throw new System.ArgumentNullException("permission");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Permission");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(permission, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Roles by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Role>> LoadRolesByFilterAsync(RoleFilter roleFilter)
        {
            return LoadRolesByFilterAsync(roleFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Roles by filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Role>> LoadRolesByFilterAsync(RoleFilter roleFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (roleFilter == null)
                throw new System.ArgumentNullException("roleFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/ByFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(roleFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Role>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Role>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Roles by user filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserRole>> LoadRolesByUserFilterAsync(RoleUserFilter roleUserFilter)
        {
            return LoadRolesByUserFilterAsync(roleUserFilter, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Roles by user filter</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserRole>> LoadRolesByUserFilterAsync(RoleUserFilter roleUserFilter, System.Threading.CancellationToken cancellationToken)
        {
            if (roleUserFilter == null)
                throw new System.ArgumentNullException("roleUserFilter");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/ByUserFilter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(roleUserFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<UserRole>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<UserRole>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get Role</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> LoadRoleAsync(int id)
        {
            return LoadRoleAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get Role</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> LoadRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete Role by id</summary>
        /// <param name="id">Delete Role</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveRoleAsync(int id)
        {
            return RemoveRoleAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete Role by id</summary>
        /// <param name="id">Delete Role</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for update Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateRoleAsync(Role role)
        {
            return UpdateRoleAsync(role, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for update Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateRoleAsync(Role role, System.Threading.CancellationToken cancellationToken)
        {
            if (role == null)
                throw new System.ArgumentNullException("role");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(role, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for create Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<int> CreateRoleAsync(Role role)
        {
            return CreateRoleAsync(role, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for create Role</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<int> CreateRoleAsync(Role role, System.Threading.CancellationToken cancellationToken)
        {
            if (role == null)
                throw new System.ArgumentNullException("role");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(role, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(int);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for add role permissions</summary>
        /// <param name="id">role id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddRolePermissionsAsync(int id, IdArrayRequest ids)
        {
            return AddRolePermissionsAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add role permissions</summary>
        /// <param name="id">role id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddRolePermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive Role Permissions</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadRolePermissionsAsync(int id)
        {
            return LoadRolePermissionsAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive Role Permissions</summary>
        /// <param name="id">Role id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Permission>> LoadRolePermissionsAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Permission>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Permission>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for remove role permissions</summary>
        /// <param name="id">role id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveRolePermissionsAsync(int id, IdArrayRequest ids)
        {
            return RemoveRolePermissionsAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove role permissions</summary>
        /// <param name="id">role id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveRolePermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/Role/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for add user permissions</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddUserPermissionsAsync(int id, IdArrayRequest ids)
        {
            return AddUserPermissionsAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add user permissions</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddUserPermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/User/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveUserPermissionsAsync(int id, IdArrayRequest ids)
        {
            return RemoveUserPermissionsAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveUserPermissionsAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/User/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for add user roles</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddUserRolesAsync(int id, IdArrayRequest ids)
        {
            return AddUserRolesAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for add user roles</summary>
        /// <param name="id">user id to add to</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddUserRolesAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/User/{id}/Roles");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveUserRolesAsync(int id, IdArrayRequest ids)
        {
            return RemoveUserRolesAsync(id, ids, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for remove user permissions</summary>
        /// <param name="id">user id to remove from</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveUserRolesAsync(int id, IdArrayRequest ids, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (ids == null)
                throw new System.ArgumentNullException("ids");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/admin/User/{id}/Roles");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by email</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterByEmailAsync(RegisterRequest email, string accept_Language)
        {
            return RegisterByEmailAsync(email, accept_Language, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by email</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterByEmailAsync(RegisterRequest email, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/Register");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(email, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong email format or user with this email already existed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by email with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterByEmailWithEnvironmentAsync(RegisterRequest email, string environmentToken, string accept_Language)
        {
            return RegisterByEmailWithEnvironmentAsync(email, environmentToken, accept_Language, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by email with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterByEmailWithEnvironmentAsync(RegisterRequest email, string environmentToken, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/Register/{EnvironmentToken}");
            if (environmentToken != null)
                urlBuilder_.Replace("{EnvironmentToken}", System.Uri.EscapeDataString(ConvertToString(environmentToken, System.Globalization.CultureInfo.InvariantCulture)));
            else
                urlBuilder_.Replace("/{EnvironmentToken}", string.Empty);
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(email, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong email format or user with this email already existed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for login by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> LoginByEmailAsync(EmailLoginRequest request)
        {
            return LoginByEmailAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> LoginByEmailAsync(EmailLoginRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/Login");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong email format / wrong email and password pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for check user exists</summary>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> DoesUserExistByEmailAsync(RegisterRequest email)
        {
            return DoesUserExistByEmailAsync(email, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for check user exists</summary>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> DoesUserExistByEmailAsync(RegisterRequest email, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/DoesUserExist");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(email, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong email format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(bool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RequestResetPasswordByEmailAsync(RegisterRequest email)
        {
            return RequestResetPasswordByEmailAsync(email, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RequestResetPasswordByEmailAsync(RegisterRequest email, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/RequestResetPassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(email, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("user with this email doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for force change email only administrator</summary>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ForceChangeEmailAsync(ChangeEmailRequest change_email_request)
        {
            return ForceChangeEmailAsync(change_email_request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force change email only administrator</summary>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ForceChangeEmailAsync(ChangeEmailRequest change_email_request, System.Threading.CancellationToken cancellationToken)
        {
            if (change_email_request == null)
                throw new System.ArgumentNullException("change_email_request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/ForceChangeEmail");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(change_email_request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong code/user pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceChange permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for force registration by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateEmailUserRequest request)
        {
            return ForceCreateUserAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force registration by email</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateEmailUserRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/ForceCreateUser");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong email or user with this email already created", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceCreateUser permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for reset email</summary>
        /// <returns>operation completes successfully, validation code sent to email</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RequestChangeEmailAsync(ChangeEmailUserRequest change_email_request)
        {
            return RequestChangeEmailAsync(change_email_request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset email</summary>
        /// <returns>operation completes successfully, validation code sent to email</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RequestChangeEmailAsync(ChangeEmailUserRequest change_email_request, System.Threading.CancellationToken cancellationToken)
        {
            if (change_email_request == null)
                throw new System.ArgumentNullException("change_email_request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/RequestChangeEmail");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(change_email_request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong password or incorrect new email", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for commit change email request</summary>
        /// <param name="code">user's pin code for change email</param>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CommitChangeEmailAsync(long code)
        {
            return CommitChangeEmailAsync(code, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for commit change email request</summary>
        /// <param name="code">user's pin code for change email</param>
        /// <returns>operation completes successfully, email was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CommitChangeEmailAsync(long code, System.Threading.CancellationToken cancellationToken)
        {
            if (code == null)
                throw new System.ArgumentNullException("code");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/email/CommitChangeEmail?");
            urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong code/user pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for login by domain user</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserWithEnvironmentAsync(ActiveDirectoryUserLoginRequest request, string environmentToken)
        {
            return LoginByDomainUserWithEnvironmentAsync(request, environmentToken, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by domain user</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserWithEnvironmentAsync(ActiveDirectoryUserLoginRequest request, string environmentToken, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ldap/Login/{EnvironmentToken}");
            if (environmentToken != null)
                urlBuilder_.Replace("{EnvironmentToken}", System.Uri.EscapeDataString(ConvertToString(environmentToken, System.Globalization.CultureInfo.InvariantCulture)));
            else
                urlBuilder_.Replace("/{EnvironmentToken}", string.Empty);
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong user name format / wrong username and password pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for login by domain user</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserAsync(ActiveDirectoryUserLoginRequest request)
        {
            return LoginByDomainUserAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for login by domain user</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> LoginByDomainUserAsync(ActiveDirectoryUserLoginRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ldap/Login");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong user name format / wrong username and password pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by phone</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterAsync(long phone, string accept_Language)
        {
            return RegisterAsync(phone, accept_Language, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterAsync(long phone, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/Register");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phone, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format or user with this phone already existed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by phone with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterWithEnvironmentAsync(long phone, string environmentToken, string accept_Language)
        {
            return RegisterWithEnvironmentAsync(phone, environmentToken, accept_Language, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone with environment scope</summary>
        /// <param name="environmentToken">user's environment token</param>
        /// <param name="accept_Language">registration language</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterWithEnvironmentAsync(long phone, string environmentToken, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/Register/{EnvironmentToken}");
            if (environmentToken != null)
                urlBuilder_.Replace("{EnvironmentToken}", System.Uri.EscapeDataString(ConvertToString(environmentToken, System.Globalization.CultureInfo.InvariantCulture)));
            else
                urlBuilder_.Replace("/{EnvironmentToken}", string.Empty);
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phone, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format or user with this phone already existed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(SmsLoginRequest request)
        {
            return LoginAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(SmsLoginRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/Login");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format / wrong phone and password pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for check user exists</summary>
        /// <param name="phone">user's phone with single number, started from 7 for Russia, 71231234567 for example</param>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> DoesUserExistAsync(long phone)
        {
            return DoesUserExistAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for check user exists</summary>
        /// <param name="phone">user's phone with single number, started from 7 for Russia, 71231234567 for example</param>
        /// <returns>True if user exists else false</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> DoesUserExistAsync(long phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/DoesUserExist?");
            urlBuilder_.Append(System.Uri.EscapeDataString("phone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(bool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for get phone by user id</summary>
        /// <param name="id">User Id</param>
        /// <returns>User phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<long> PhoneByUserIdAsync(int id)
        {
            return PhoneByUserIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for get phone by user id</summary>
        /// <param name="id">User Id</param>
        /// <returns>User phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<long> PhoneByUserIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/PhoneByUserId?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(long);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for refresh access token</summary>
        /// <param name="refreshToken">Refresh token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(string refreshToken)
        {
            return RefreshAsync(refreshToken, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for refresh access token</summary>
        /// <param name="refreshToken">Refresh token</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(string refreshToken, System.Threading.CancellationToken cancellationToken)
        {
            if (refreshToken == null)
                throw new System.ArgumentNullException("refreshToken");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Refresh/{refreshToken}");
            urlBuilder_.Replace("{refreshToken}", System.Uri.EscapeDataString(ConvertToString(refreshToken, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RequestResetPasswordAsync(long phone)
        {
            return RequestResetPasswordAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for reset password</summary>
        /// <returns>operation completes successfully, code has been sent</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RequestResetPasswordAsync(long phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/RequestResetPassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phone, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("user with this phone doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest request)
        {
            return ChangePasswordAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/ChangePassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong old password or too easy new password", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateUserRequest request)
        {
            return ForceCreateUserAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for registration by phone</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> ForceCreateUserAsync(ForceCreateUserRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/ForceCreateUser");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone or user with this phone already created", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceCreateUser permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for force change phone only administrator</summary>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ForceChangePhoneAsync(ChangePhoneRequest phone)
        {
            return ForceChangePhoneAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force change phone only administrator</summary>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ForceChangePhoneAsync(ChangePhoneRequest phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/ForceChangePhone");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phone, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong code/user pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceChangePhone permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ForceResetPasswordAsync(long phone)
        {
            return ForceResetPasswordAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ForceResetPasswordAsync(long phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/ForceResetPassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phone, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone or user with this phone not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceResetPassword permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for change phone</summary>
        /// <returns>operation completes successfully, validation code sent to phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RequestChangePhoneAsync(ChangePhoneUserRequest change_phone_request)
        {
            return RequestChangePhoneAsync(change_phone_request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change phone</summary>
        /// <returns>operation completes successfully, validation code sent to phone</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RequestChangePhoneAsync(ChangePhoneUserRequest change_phone_request, System.Threading.CancellationToken cancellationToken)
        {
            if (change_phone_request == null)
                throw new System.ArgumentNullException("change_phone_request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/RequestChangePhone");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(change_phone_request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong password or incorrect new phone", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for commit change phone request</summary>
        /// <param name="code">user's pin code for change phone</param>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CommitChangePhoneAsync(long code)
        {
            return CommitChangePhoneAsync(code, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for commit change phone request</summary>
        /// <param name="code">user's pin code for change phone</param>
        /// <returns>operation completes successfully, phone was changed</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CommitChangePhoneAsync(long code, System.Threading.CancellationToken cancellationToken)
        {
            if (code == null)
                throw new System.ArgumentNullException("code");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/CommitChangePhone?");
            urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong code/user pair", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive own profile</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> GetMyProfileAsync()
        {
            return GetMyProfileAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive own profile</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> GetMyProfileAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/profile");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Incorrect ids format or unsupported auth type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Profile not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for change password</summary>
        /// <returns>operation completes successfully</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ChangeMyPasswordAsync(ChangePasswordRequest request)
        {
            return ChangeMyPasswordAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change password</summary>
        /// <returns>operation completes successfully</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ChangeMyPasswordAsync(ChangePasswordRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/profile/ChangePassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong old password or too easy new password", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.basic permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive profiles by user ids</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetUserByFilterAsync(UserProfileFilter request)
        {
            return GetUserByFilterAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profiles by user ids</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetUserByFilterAsync(UserProfileFilter request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/profile/filter");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<UserProfile>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this profile id for the auth type wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("incorrect ids format or unsupported auth type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.viewProfile\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<UserProfile>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive all profiles</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetAllUsersAsync()
        {
            return GetAllUsersAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive all profiles</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserProfile>> GetAllUsersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/profile/all");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<UserProfile>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("incorrect ids format or unsupported auth type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.viewProfile\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<UserProfile>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive profile by phone</summary>
        /// <param name="phone">User phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> GetUserByPhoneAsync(long phone)
        {
            return GetUserByPhoneAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profile by phone</summary>
        /// <param name="phone">User phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> GetUserByPhoneAsync(long phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/sms/{phone}");
            urlBuilder_.Replace("{phone}", System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this profile id wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("incorrect id format or unsupported auth type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.viewUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive profile by user id</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> GetUserByIdAsync(int id)
        {
            return GetUserByIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive profile by user id</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> GetUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this profile id for the auth type wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("incorrect id format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.viewUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for change user data</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserProfile> UpdateUserAsync(int id, UserProfile request)
        {
            return UpdateUserAsync(id, request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for change user data</summary>
        /// <param name="id">User id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserProfile> UpdateUserAsync(int id, UserProfile request, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserProfile>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this profile id for the auth type wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("incorrect input format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.editUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUserAsync(int id)
        {
            return DeleteUserAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong id format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this id wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.editUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for lock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LockUserAsync(int id)
        {
            return LockUserAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for lock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task LockUserAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/{id}/lock");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong id format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this id wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.editUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for unlock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UnlockUserAsync(int id)
        {
            return UnlockUserAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for unlock user</summary>
        /// <param name="id">id</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnlockUserAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/{id}/unlock");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong id format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this id wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.editUsers\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ForceResetUserPasswordAsync(ForceResetPasswordRequest request)
        {
            return ForceResetUserPasswordAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for force reset password only administrator</summary>
        /// <returns>operation completes successfully, new password sent to user</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ForceResetUserPasswordAsync(ForceResetPasswordRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/users/ForceResetPassword");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone, email or user with this phone not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("authentication required. jwt token in header", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("domain0.forceResetPassword permission required", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for delete user</summary>
        /// <param name="phone">phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUserByPhoneAsync(long phone)
        {
            return DeleteUserByPhoneAsync(phone, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for delete user</summary>
        /// <param name="phone">phone</param>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUserByPhoneAsync(long phone, System.Threading.CancellationToken cancellationToken)
        {
            if (phone == null)
                throw new System.ArgumentNullException("phone");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/sms/{phone}");
            urlBuilder_.Replace("{phone}", System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("wrong phone format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("internal error during request execution", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("User with this profile id for the auth type wasn\'t found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("Provide domain0 auth token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Domain0ClientException("you need \'domain0.basic\' permission", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for receive environments</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> GetEnvironmentsAvailableForCreateUsersAsync()
        {
            return GetEnvironmentsAvailableForCreateUsersAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for receive environments</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Environment>> GetEnvironmentsAvailableForCreateUsersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/environments/AvailableForCreateUsers");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Environment>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.List<Environment>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Method for refresh access token</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> RefreshTokenAsync(RefreshTokenRequest refreshToken)
        {
            return RefreshTokenAsync(refreshToken, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Method for refresh access token</summary>
        /// <returns>Success</returns>
        /// <exception cref="Domain0ClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccessTokenResponse> RefreshTokenAsync(RefreshTokenRequest refreshToken, System.Threading.CancellationToken cancellationToken)
        {
            if (refreshToken == null)
                throw new System.ArgumentNullException("refreshToken");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Refresh");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(refreshToken, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new Domain0ClientException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new Domain0ClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new Domain0ClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Sms login request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SmsLoginRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SmsLoginRequest(string @password, long @phone)
        {
            this.Password = @password;
            this.Phone = @phone;
        }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        public long Phone { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SmsLoginRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SmsLoginRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ModelValidationError 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ModelValidationError(string @errorMessage, System.Collections.Generic.List<string> @memberNames)
        {
            this.ErrorMessage = @errorMessage;
            this.MemberNames = @memberNames;
        }
    
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; }
    
        [Newtonsoft.Json.JsonProperty("memberNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MemberNames { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ModelValidationError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelValidationError>(data);
        }
    
    }
    
    /// <summary>Role permission</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RolePermission 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RolePermission(int @applicationId, string @description, int? @id, string @name, int @roleId)
        {
            this.ApplicationId = @applicationId;
            this.Description = @description;
            this.Id = @id;
            this.Name = @name;
            this.RoleId = @roleId;
        }
    
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Always)]
        public int RoleId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RolePermission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RolePermission>(data);
        }
    
    }
    
    /// <summary>User permission</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserPermission 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UserPermission(int @applicationId, string @description, int? @id, string @name, int? @roleId, int @userId)
        {
            this.ApplicationId = @applicationId;
            this.Description = @description;
            this.Id = @id;
            this.Name = @name;
            this.RoleId = @roleId;
            this.UserId = @userId;
        }
    
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleId { get; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserPermission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPermission>(data);
        }
    
    }
    
    /// <summary>User role</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserRole 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UserRole(string @description, int? @id, bool @isDefault, string @name, int @userId)
        {
            this.Description = @description;
            this.Id = @id;
            this.IsDefault = @isDefault;
            this.Name = @name;
            this.UserId = @userId;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRole>(data);
        }
    
    }
    
    /// <summary>Application filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApplicationFilter(System.Collections.Generic.List<int> @applicationIds)
        {
            this.ApplicationIds = @applicationIds;
        }
    
        [Newtonsoft.Json.JsonProperty("applicationIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ApplicationIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationFilter>(data);
        }
    
    }
    
    /// <summary>Application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Application 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Application(string @description, int? @id, string @name)
        {
            this.Description = @description;
            this.Id = @id;
            this.Name = @name;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Application FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data);
        }
    
    }
    
    /// <summary>Environment filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvironmentFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public EnvironmentFilter(System.Collections.Generic.List<int> @ids, bool? @loadAll)
        {
            this.Ids = @ids;
            this.LoadAll = @loadAll;
        }
    
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Ids { get; }
    
        [Newtonsoft.Json.JsonProperty("loadAll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LoadAll { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EnvironmentFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentFilter>(data);
        }
    
    }
    
    /// <summary>Environment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Environment 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Environment(string @description, int? @id, bool @isDefault, string @name, string @token)
        {
            this.Description = @description;
            this.Id = @id;
            this.IsDefault = @isDefault;
            this.Name = @name;
            this.Token = @token;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Environment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Environment>(data);
        }
    
    }
    
    /// <summary>Message template filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageTemplateFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public MessageTemplateFilter(System.Collections.Generic.List<int> @messageTemplatesIds)
        {
            this.MessageTemplatesIds = @messageTemplatesIds;
        }
    
        [Newtonsoft.Json.JsonProperty("messageTemplatesIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> MessageTemplatesIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessageTemplateFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageTemplateFilter>(data);
        }
    
    }
    
    /// <summary>Message template</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageTemplate 
    {
        [Newtonsoft.Json.JsonConstructor]
        public MessageTemplate(string @description, int @environmentId, int? @id, string @locale, string @name, string @template, string @type)
        {
            this.Description = @description;
            this.EnvironmentId = @environmentId;
            this.Id = @id;
            this.Locale = @locale;
            this.Name = @name;
            this.Template = @template;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("environmentId", Required = Newtonsoft.Json.Required.Always)]
        public int EnvironmentId { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessageTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageTemplate>(data);
        }
    
    }
    
    /// <summary>User permission filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserPermissionFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UserPermissionFilter(System.Collections.Generic.List<int> @userIds)
        {
            this.UserIds = @userIds;
        }
    
        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> UserIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserPermissionFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPermissionFilter>(data);
        }
    
    }
    
    /// <summary>Role permission filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RolePermissionFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RolePermissionFilter(System.Collections.Generic.List<int> @roleIds)
        {
            this.RoleIds = @roleIds;
        }
    
        [Newtonsoft.Json.JsonProperty("roleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> RoleIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RolePermissionFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RolePermissionFilter>(data);
        }
    
    }
    
    /// <summary>Permission filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PermissionFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public PermissionFilter(System.Collections.Generic.List<int> @permissionIds)
        {
            this.PermissionIds = @permissionIds;
        }
    
        [Newtonsoft.Json.JsonProperty("permissionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> PermissionIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PermissionFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionFilter>(data);
        }
    
    }
    
    /// <summary>Permission</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Permission 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Permission(int @applicationId, string @description, int? @id, string @name)
        {
            this.ApplicationId = @applicationId;
            this.Description = @description;
            this.Id = @id;
            this.Name = @name;
        }
    
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Permission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Permission>(data);
        }
    
    }
    
    /// <summary>Role filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RoleFilter(System.Collections.Generic.List<int> @roleIds)
        {
            this.RoleIds = @roleIds;
        }
    
        [Newtonsoft.Json.JsonProperty("roleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> RoleIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RoleFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoleFilter>(data);
        }
    
    }
    
    /// <summary>Role by user filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleUserFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RoleUserFilter(System.Collections.Generic.List<int> @userIds)
        {
            this.UserIds = @userIds;
        }
    
        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> UserIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RoleUserFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoleUserFilter>(data);
        }
    
    }
    
    /// <summary>Role</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Role 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Role(string @description, int? @id, bool @isDefault, string @name)
        {
            this.Description = @description;
            this.Id = @id;
            this.IsDefault = @isDefault;
            this.Name = @name;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Role FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(data);
        }
    
    }
    
    /// <summary>IdArrayRequest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdArrayRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public IdArrayRequest(System.Collections.Generic.List<int> @ids)
        {
            this.Ids = @ids;
        }
    
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Ids { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IdArrayRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdArrayRequest>(data);
        }
    
    }
    
    /// <summary>Register by email request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegisterRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RegisterRequest(string @email)
        {
            this.Email = @email;
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RegisterRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegisterRequest>(data);
        }
    
    }
    
    /// <summary>Access token response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccessTokenResponse 
    {
        [Newtonsoft.Json.JsonConstructor]
        public AccessTokenResponse(string @accessToken, UserProfile @profile, string @refreshToken)
        {
            this.AccessToken = @accessToken;
            this.Profile = @profile;
            this.RefreshToken = @refreshToken;
        }
    
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; }
    
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserProfile Profile { get; }
    
        [Newtonsoft.Json.JsonProperty("refresh_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AccessTokenResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccessTokenResponse>(data);
        }
    
    }
    
    /// <summary>email login request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailLoginRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public EmailLoginRequest(string @email, string @password)
        {
            this.Email = @email;
            this.Password = @password;
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EmailLoginRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmailLoginRequest>(data);
        }
    
    }
    
    /// <summary>Force change email request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangeEmailRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ChangeEmailRequest(string @locale, string @newEmail, int @userId)
        {
            this.Locale = @locale;
            this.NewEmail = @newEmail;
            this.UserId = @userId;
        }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("newEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewEmail { get; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChangeEmailRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeEmailRequest>(data);
        }
    
    }
    
    /// <summary>User profile</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserProfile 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UserProfile(string @description, string @email, int @id, bool @isLocked, string @name, string @phone)
        {
            this.Description = @description;
            this.Email = @email;
            this.Id = @id;
            this.IsLocked = @isLocked;
            this.Name = @name;
            this.Phone = @phone;
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }
    
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLocked { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfile>(data);
        }
    
    }
    
    /// <summary>Force create email user request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ForceCreateEmailUserRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ForceCreateEmailUserRequest(bool @blockEmailSend, string @customEmailSubjectTemplate, string @customEmailTemplate, string @email, string @environmentToken, string @locale, string @name, System.Collections.Generic.List<string> @roles)
        {
            this.BlockEmailSend = @blockEmailSend;
            this.CustomEmailSubjectTemplate = @customEmailSubjectTemplate;
            this.CustomEmailTemplate = @customEmailTemplate;
            this.Email = @email;
            this.EnvironmentToken = @environmentToken;
            this.Locale = @locale;
            this.Name = @name;
            this.Roles = @roles;
        }
    
        [Newtonsoft.Json.JsonProperty("blockEmailSend", Required = Newtonsoft.Json.Required.Always)]
        public bool BlockEmailSend { get; }
    
        [Newtonsoft.Json.JsonProperty("customEmailSubjectTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomEmailSubjectTemplate { get; }
    
        [Newtonsoft.Json.JsonProperty("customEmailTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomEmailTemplate { get; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        [Newtonsoft.Json.JsonProperty("environmentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentToken { get; }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForceCreateEmailUserRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForceCreateEmailUserRequest>(data);
        }
    
    }
    
    /// <summary>Request to change email</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangeEmailUserRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ChangeEmailUserRequest(string @email, string @password)
        {
            this.Email = @email;
            this.Password = @password;
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChangeEmailUserRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeEmailUserRequest>(data);
        }
    
    }
    
    /// <summary>Domain user login request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActiveDirectoryUserLoginRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ActiveDirectoryUserLoginRequest(string @password, string @userName)
        {
            this.Password = @password;
            this.UserName = @userName;
        }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ActiveDirectoryUserLoginRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActiveDirectoryUserLoginRequest>(data);
        }
    
    }
    
    /// <summary>Change password request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangePasswordRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ChangePasswordRequest(string @newPassword, string @oldPassword)
        {
            this.NewPassword = @newPassword;
            this.OldPassword = @oldPassword;
        }
    
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword { get; }
    
        [Newtonsoft.Json.JsonProperty("oldPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldPassword { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChangePasswordRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangePasswordRequest>(data);
        }
    
    }
    
    /// <summary>Force create user request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ForceCreateUserRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ForceCreateUserRequest(bool @blockSmsSend, string @customSmsTemplate, string @environmentToken, string @locale, string @name, long? @phone, System.Collections.Generic.List<string> @roles)
        {
            this.BlockSmsSend = @blockSmsSend;
            this.CustomSmsTemplate = @customSmsTemplate;
            this.EnvironmentToken = @environmentToken;
            this.Locale = @locale;
            this.Name = @name;
            this.Phone = @phone;
            this.Roles = @roles;
        }
    
        [Newtonsoft.Json.JsonProperty("blockSmsSend", Required = Newtonsoft.Json.Required.Always)]
        public bool BlockSmsSend { get; }
    
        [Newtonsoft.Json.JsonProperty("customSmsTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomSmsTemplate { get; }
    
        [Newtonsoft.Json.JsonProperty("environmentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentToken { get; }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Phone { get; }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForceCreateUserRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForceCreateUserRequest>(data);
        }
    
    }
    
    /// <summary>Force change phone request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangePhoneRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ChangePhoneRequest(string @locale, long @newPhone, int @userId)
        {
            this.Locale = @locale;
            this.NewPhone = @newPhone;
            this.UserId = @userId;
        }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("newPhone", Required = Newtonsoft.Json.Required.Always)]
        public long NewPhone { get; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChangePhoneRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangePhoneRequest>(data);
        }
    
    }
    
    /// <summary>Request to change phone</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangePhoneUserRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ChangePhoneUserRequest(string @password, long @phone)
        {
            this.Password = @password;
            this.Phone = @phone;
        }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        public long Phone { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ChangePhoneUserRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangePhoneUserRequest>(data);
        }
    
    }
    
    /// <summary>User profile filter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserProfileFilter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UserProfileFilter(System.Collections.Generic.List<int> @userIds)
        {
            this.UserIds = @userIds;
        }
    
        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> UserIds { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserProfileFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileFilter>(data);
        }
    
    }
    
    /// <summary>Force reset user request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ForceResetPasswordRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ForceResetPasswordRequest(string @email, string @locale, long? @phone, int? @userId)
        {
            this.Email = @email;
            this.Locale = @locale;
            this.Phone = @phone;
            this.UserId = @userId;
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Phone { get; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForceResetPasswordRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForceResetPasswordRequest>(data);
        }
    
    }
    
    /// <summary>Refresh token request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.18.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RefreshTokenRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RefreshTokenRequest(string @refreshToken)
        {
            this.RefreshToken = @refreshToken;
        }
    
        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RefreshTokenRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RefreshTokenRequest>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Domain0ClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public Domain0ClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Domain0ClientException<TResult> : Domain0ClientException
    {
        public TResult Result { get; private set; }

        public Domain0ClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108